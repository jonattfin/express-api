openapi: 3.0.0
info:
  description: >-
    This is a sample Express-api server. You can find out more about Swagger at
    [http://swagger.io](http://swagger.io) or on [irc.freenode.net,
    #swagger](http://swagger.io/irc/).
  version: 1.0.0
  title: Swagger Express-Api
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: actions
    description: Operations you can do without being logged in.
  - name: measure
    description: Operations about measures.
  - name: user
    description: Operations about users.
paths:
  /measures/last-day:
    get:
      security:
      - bearerAuth: []
      tags:
        - measure
      summary: Get all the measures for the last day
      operationId: getLastDay
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measure'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measure'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /measures/last-week:
    get:
      security:
      - bearerAuth: []
      tags:
        - measure
      summary: Get all the measures for the last week
      operationId: getLastDay
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measure'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measure'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /measures/last-month:
    get:
      security:
      - bearerAuth: []
      tags:
        - measure
      summary: Get all the measures for the last week
      operationId: getLastDay
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measure'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Measure'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user:
    get:
      security:
      - bearerAuth: []
      tags:
        - user
      summary: Find all users
      description: Returns all users
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /actions/login:
    post:
      tags:
        - actions
      summary: Get the token that will be used by the user to log in into the system
      description: ''
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserLogin'
        description: Login data
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /actions/seed:
    put:
      tags:
        - actions
      summary: Seeds the DB (delete everything & create new items)
      description: Be aware that everything existing will be deleted
      operationId: populate
      responses:
        '201':
          description: All items were inserted into DB
        '422':
          description: Validation exception
  /actions/signUp:
    post:
      tags:
        - actions
      summary: Create user
      description: This can only be done by the non logged in user.
      operationId: createUser
      responses:
        '201':
          description: Item created
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Invalid input
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  '/user/{id}':
    get:
      security:
      - bearerAuth: []
      tags:
        - user
      summary: Get user by id
      description: ''
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: The id of the user that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid id supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
    put:
      security:
      - bearerAuth: []
      tags:
        - user
      summary: Update an existing user
      description: ''
      operationId: updateById
      parameters:
        - name: id
          in: path
          description: ID of user to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: User object that needs to be updated
        required: true
      responses:
        '400':
          description: Invalid ID supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
        '422':
          description: Validation exception
    delete:
      security:
      - bearerAuth: []
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid id supplied
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: User not found
  /user/loggedin:
    get:
      security:
      - bearerAuth: []
      tags:
        - user
      summary: Get logged in user.
      description: ''
      operationId: getLoggedInUser
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user/logout:
    post:
      security:
      - bearerAuth: []
      tags:
        - user
      summary: Logout the user from the system / Invalidate the token for the user.
      description: ''
      operationId: logout
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  - url: 'http://localhost:8080/api/v1'
  - url: 'https://express-api-19.herokuapp.com/api/v1'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    Measure:
      type: object
      required:
        - source
        - type
        - country
        - day
        - sensorId
      properties:
        source:
          type: string
        city:
          type: string
        country:
          type: string
        day:
          type: string
        sensorId:
          type: string
        position:
          $ref: "#/components/schemas/Position"
        pm10:
          type: "integer"
          format: "int64"
        pm25:
          type: "integer"
          format: "int64"
        temperature:
          type: "integer"
          format: "int64"
        humidity:
          type: "integer"
          format: "int64"
      xml:
        name: Measure
    Position:
      type: "object"
      properties:
        latitude:
          type: "integer"
          format: "int64"
        longitude:
          type: "integer"
          format: "int64"
      xml:
        name: "Position"
    User:
      type: object
      required:
        - username
        - firstName
        - lastName
        - email
        - password
        - phone
      properties:
        username:
          type: string
          example: "joe_doe"
        firstName:
          type: string
          example: "Joe"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          example: "joe_doe@mail.com"
        password:
          type: string
          example: "joe_doe_secret_pwd"
        phone:
          type: string
          example: "0746161315"
        subscribedTopics:
          type: array
          items:
            type: string
          example:
            - 5bdbfd652c76cb0f58d8b1c4
      xml:
        name: User
    UserLogin:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
      xml:
        name: UserLogin
